
function  satGEOM_struct=satGEOM(satrec,Eyear,tsince_min,origin_llh,h_intercept,PassID)
    %Generate Satellite Geometry
    %USAGE:
    %
    %INPUTS:
    %   satrec      = structure generated by twoline2rvMOD
    %   Eyear       = TLE Epoch fractional years 
    %   tsince_M    = time since epoch in minutes
    %   origin_llh  = llh column vector [lat_deg, lon_deg, altitude_met]
    %   PassID      = ID string 
    %
    %OUTPUTS:
    %*************ecf Coordinates**********************************************************
    %xsat_ecf, vsat_ecf = satellite state vector in ecf coordinates from spg4         (3XN)
    %************GPS Coordinates***********************************************************
    %sat_llh            = satellite geodetic coordinates                              (3XN)
    %************Station TCS coordinates***************************************************
    %sat_tcs,  vsat_tcs = satellite state vector in receiver tcs system at origin_llh (3XN)
    %sat_rng,  sat_rdot = satellite rang & range rate (=> sat_tcs)                    (3XN)           (NX1)
    %sat_elev, sat_phi  = satellite elevation & true bearing                          (NX1)
    %*************Propagation Reference Coordinates at penetration point*******************
    %xyzp               = propagation coordinates with origin at h_intercept          (3xN)
    %thetap, phip       = polar angles wrt x  (phip  cw from y-axis                   (NX1)
    %                                          theta cw from x-axis
    %rngp               = range from receiver to intercept point                      (Nx1)
    %uk_xyzp            = unit vector pointing along propagation direction            (3XN)
    %s                  = unit magnetic field vector xp,yp,zp system                  (3xN)
    %thetaB,psiB        = polar angles wrt xp                                         (Nx1)
    %vp                 = penetration point velocity <= satellite motion
    %vk                 = apparent velocity in measurement plane
    %
    min_per_day=60*24;
    dtr=pi/180;
    
    npts=length(tsince_min);
    xsat_ecf=zeros(3,npts);
    vsat_ecf=zeros(3,npts);
    
    sat_llh =zeros(3,npts);
    sat_tcs =zeros(3,npts);
    vsat_tcs=zeros(3,npts);
    usat_tcs=zeros(3,npts);
    
    xyzp    =zeros(3,npts);
    
    sat_rnge=zeros(1,npts);
    sat_elev=zeros(1,npts);
    sat_phi=zeros(1,npts);
    sat_rdot=zeros(1,npts);
   
    for n=1:npts
        [satrec, xsat_ecf(:,n), vsat_ecf(:,n)]=spg4_ecf(satrec,tsince_min(n));
    end
    %Scale state vectors to mks units
    xsat_ecf=xsat_ecf*1000;  %m
    vsat_ecf=vsat_ecf*1000;  %mps
    
    sat_llh=ecf2llhT(xsat_ecf);            %ECF to geodetic (llh)
    sat_tcs=llh2tcsT(sat_llh,origin_llh);  %llh to tcs at origin_llh
    D=Rotate_ecf2tcs(origin_llh);
    vsat_tcs=D*vsat_ecf;
    
    sat_rnge=sqrt(sat_tcs(1,:).^2+sat_tcs(2,:).^2+sat_tcs(3,:).^2);
    usat_tcs=sat_tcs./repmat(sat_rnge,3,1);
    
    %Satellite elevation & bearing (sat_phi)
    sat_elev=atan2(sat_tcs(3,:),sqrt(sat_tcs(1,:).^2+sat_tcs(2,:).^2));
    sat_phi=atan2(sat_tcs(2,:),sat_tcs(1,:));
    sat_rdot=sum(vsat_tcs.*usat_tcs);
    
    %*************Locate path intercept at height h_intercept*******************
    satp_tcs=zeros(size(sat_tcs));
    satp_llh=zeros(size(sat_tcs));
    nsamp=length(sat_rnge);
    for n=1:nsamp
        satp_llh(:,n)=findIntercept(h_intercept,usat_tcs(:,n),sat_rnge(n),origin_llh);
    end
    
    %Convert penetration point position to TCS
    satp_tcs=llh2tcsT(satp_llh,origin_llh);  
    
    %Convert satellite TCS to xyzp
    xyzp_tcs=llh2tcsT(origin_llh,satp_llh);
    xyzp(1,:)=-xyzp_tcs(3,:);
    xyzp(2,:)= xyzp_tcs(1,:);
    xyzp(3,:)=-xyzp_tcs(2,:);
    rngp  =sqrt(xyzp(1,:).^2+xyzp(2,:).^2++xyzp(3,:).^2);
    uk_xyzp  = xyzp./repmat(rngp,3,1);
    
    thetap=atan2(sqrt(xyzp(2,:).^2+xyzp(3,:).^2),xyzp(1,:));
    phip  =atan2(xyzp(3,:),xyzp(2,:));
    vSF=rngp./sat_rnge;  %Velocity scale vactor at penetration point
    for n=1:npts
        D=Rotate_ecf2tcs(satp_llh(:,n));
        vp(1,:)=-vsat_tcs(3,:).*vSF;
        vp(2,:)= vsat_tcs(1,:).*vSF;
        vp(3,:)=-vsat_tcs(2,:).*vSF;
    end
    vk=[-vp(2,:)+tan(thetap).*cos(phip).*vp(1,:); -vp(3,:)+tan(thetap).*sin(phip).*vp(1,:)];
    
    alt_km=h_intercept/1000;
    jdsatepoch=satrec.jdsatepoch;
    jdsatyear=jday(Eyear,0,0,0,0,0); %month,day,hour,min,sec
    jdsatyear_plus1=jday(Eyear+1,0,0,0,0,0);
    ndays_year=jdsatyear_plus1-jdsatyear;
    fyear=Eyear+(jdsatepoch-jdsatyear)/ndays_year;
    fyear=fyear+tsince_min/min_per_day/ndays_year;
    fprintf('\nComputing B field at %8.2f km intercept \n',alt_km)
    
    global gh
    gh=GetIGRF11_Coefficients;
    xyzt=zeros(3,nsamp);
    for n=1:nsamp
        xyzt(:,n)=igrf11syn(fyear(n),alt_km,satp_llh(1,n)/dtr,satp_llh(2,n)/dtr);
    end 
    %Unit vector along B in xyzp system
    Bmag=sqrt(xyzt(1,:).^2+xyzt(2,:).^2+xyzt(3,:).^2);
    s(1,:)=-xyzt(3,:)./Bmag;    %xyzt(3,:) vert
    s(2,:)= xyzt(2,:)./Bmag;    %xyzt(2,:) East
    s(3,:)=-xyzt(1,:)./Bmag;    %xyzt(1,:) North
    clear xyzt
    thetaB=atan2(s(1,:),sqrt(s(2,:).^2+s(3,:).^2));
    phiB  =atan2(s(3,:),s(2,:));
    cosBP=dot(uk_xyzp,s);
    
    satGEOM_struct=struct('PassID',PassID,'sat_llh',sat_llh, 'sat_tcs',sat_tcs, 'vsat_tcs',vsat_tcs,...
                          'sat_rnge',sat_rnge, 'sat_rdot',sat_rdot, 'sat_elev',sat_elev, 'sat_phi',sat_phi,...
                          'satp_tcs',satp_tcs, 'satp_llh',satp_llh, 'xyzp',xyzp, 'uk_xyzp',uk_xyzp,... 
                          'rngp',rngp, 'thetap',thetap, 'phip',phip, 'vp',vp, 'vk',vk,...
                          's',s,'thetaB',thetaB,'phiB',phiB,'cosBP',cosBP,...
                          'xsat_ecf',xsat_ecf, 'vsat_ecf',vsat_ecf);
return
end